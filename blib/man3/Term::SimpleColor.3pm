.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Term::SimpleColor 3"
.TH Term::SimpleColor 3 "2013-02-23" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::SimpleColor \- A very simple color screen output
.SS "\s-1SYNOPSIS\s0"
.IX Subsection "SYNOPSIS"
.Vb 2
\&    use Term::SimpleColor;
\&    print red "a red line\en";
\&
\&    print green;
\&    print "green\en";
\&    print "green line 2\en";
\&    print default; # finish green
\&
\&
\&    # backgroud color
\&    use Term::SimpleColor qw(:background);
\&    print bg_red "a line on red background\en";
\&
\&    print bg_green;
\&    print "line 1 on green background\en";
\&    print "line 2 on green background\en";
\&    print bg_default; # finish green
\&
\&
\&    # text decoration
\&    use Term::SimpleColor qw(:decorate);
\&    print underscore "a line with underscore\en";
\&
\&    print invert;
\&    print "line 1 with invert\en";
\&    print "line 2 with invert\en";
\&    print dc_default; # finish invert
.Ve
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
.Vb 3
\&   Easy to make your terminal program output colorful.
\&   Term::ANSIColor is very useful but complicate.
\&   Term::SimpleColor provides easy understanding methods with an implementation optimised for the common case.
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "black( $string )" 4
.el .IP "black( \f(CW$string\fR )" 4
.IX Item "black( $string )"
.Vb 4
\&    This shows black string.
\&    If parameter is set, only set the string black.
\&    The paramater is not set, you can show multiple string black.
\&    black method is defaultly exported.
\&
\&    Exsample for one string
\&
\&    print black( $string );
\&        OR:
\&    print black $string;
\&
\&
\&    Exsample for multiple string.
\&   
\&    print black();
\&    print $string1;
\&    print $string2;
\&    print default(); # back to default setting
.Ve
.ie n .IP "red( $string )" 4
.el .IP "red( \f(CW$string\fR )" 4
.IX Item "red( $string )"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "green( $string )" 4
.el .IP "green( \f(CW$string\fR )" 4
.IX Item "green( $string )"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "yellow( $string )" 4
.el .IP "yellow( \f(CW$string\fR )" 4
.IX Item "yellow( $string )"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "blue( $string )" 4
.el .IP "blue( \f(CW$string\fR )" 4
.IX Item "blue( $string )"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "magenta( $string )" 4
.el .IP "magenta( \f(CW$string\fR )" 4
.IX Item "magenta( $string )"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "cyan( $string )" 4
.el .IP "cyan( \f(CW$string\fR )" 4
.IX Item "cyan( $string )"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "white( $string )" 4
.el .IP "white( \f(CW$string\fR )" 4
.IX Item "white( $string )"
.Vb 1
\&    Same as black()
.Ve
.IP "\fIdefault()\fR" 4
.IX Item "default()"
.Vb 1
\&    Same as black()
.Ve
.ie n .IP "bg_black( $string )" 4
.el .IP "bg_black( \f(CW$string\fR )" 4
.IX Item "bg_black( $string )"
.Vb 8
\&    This shows the string on black background.
\&    If parameter is set, only show the string on black backgrond.
\&    The paramater is not set, you can show multiple strings on black background.
\&    To export like these
\&    \*(Aquse Term::SimplrColor qw( bg_black );\*(Aq,
\&    \*(Aquse Term::SimplrColor qw( :background );\*(Aq
\&    or
\&    \*(Aquse Term::SimplrColor qw( :all );\*(Aq
\&
\&    Exsample for using one string
\&
\&    print bg_black( $string );
\&        OR:
\&    print bg_black $string;
\&
\&
\&    Exsample for multiple string.
\&   
\&    print bg_black();
\&    print $string1;
\&    print $string2;
\&    print bg_default(); # back to default setting
.Ve
.ie n .IP "bg_red( $string )" 4
.el .IP "bg_red( \f(CW$string\fR )" 4
.IX Item "bg_red( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bg_green( $string )" 4
.el .IP "bg_green( \f(CW$string\fR )" 4
.IX Item "bg_green( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bg_yellow( $string )" 4
.el .IP "bg_yellow( \f(CW$string\fR )" 4
.IX Item "bg_yellow( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bg_blue( $string )" 4
.el .IP "bg_blue( \f(CW$string\fR )" 4
.IX Item "bg_blue( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bg_magenta( $string )" 4
.el .IP "bg_magenta( \f(CW$string\fR )" 4
.IX Item "bg_magenta( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bg_cyan( $string )" 4
.el .IP "bg_cyan( \f(CW$string\fR )" 4
.IX Item "bg_cyan( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bg_gray( $string )" 4
.el .IP "bg_gray( \f(CW$string\fR )" 4
.IX Item "bg_gray( $string )"
.Vb 1
\&    Same as bg_black()
.Ve
.IP "\fIbg_default()\fR" 4
.IX Item "bg_default()"
.Vb 1
\&    Same as bg_black()
.Ve
.ie n .IP "bold( $string )" 4
.el .IP "bold( \f(CW$string\fR )" 4
.IX Item "bold( $string )"
.Vb 8
\&    This shows the bold string.
\&    If parameter is set, only show the bold string. 
\&    The paramater is not set, you can show multiple bold strings.
\&    To export like these
\&    \*(Aquse Term::SimplrColor qw( bold );\*(Aq,
\&    \*(Aquse Term::SimplrColor qw( :decoration );\*(Aq
\&    or 
\&    \*(Aquse Term::SimplrColor qw( :all );\*(Aq
\&
\&
\&    Exsample for using one string
\&
\&    print bold( $string );
\&        OR:
\&    print bold $string;
\&
\&
\&    Exsample for multiple string.
\&   
\&    print bold();
\&    print $string1;
\&    print $string2;
\&    print dc_default(); # back to default setting
.Ve
.ie n .IP "underscore( $string )" 4
.el .IP "underscore( \f(CW$string\fR )" 4
.IX Item "underscore( $string )"
.Vb 1
\&    Same as bold().
.Ve
.ie n .IP "invert( $string )" 4
.el .IP "invert( \f(CW$string\fR )" 4
.IX Item "invert( $string )"
.Vb 1
\&    Same as bold().
.Ve
.IP "\fIdc_default()\fR" 4
.IX Item "dc_default()"
.Vb 1
\&    Same as bold().
.Ve
.SS "\s-1AUTHOR\s0"
.IX Subsection "AUTHOR"
Takashi Uesugi <tksuesg@gmail.com>
.SS "\s-1COPYRIGHT\s0 \s-1AND\s0 \s-1LICENCE\s0"
.IX Subsection "COPYRIGHT AND LICENCE"
Copyright (C) 2013 by Takashi Uesugi
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
